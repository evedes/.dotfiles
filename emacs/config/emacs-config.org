#+TITLE: Emacs Configuration
#+AUTHOR: Eduardo Vedes
#+DATE: 2022-05-06
#+PROPERTY: header-args:emacs-lisp :tangle ~/.emacs.d/init.el :mkdirp yes
#+OPTIONS: toc:2 num:nil

* How to install this Emacs literate config?

- Make sure you clone *.dotfiles* repository from GitHub.
- Create *.emacs.d* folder at ~/
- Do `ln -s ~/.dotfiles/emacs/* ~/.emacs.d/`
- At this point if you ls *.emacs.d* folder you'll find 2 folders:
  - *notes/emacs-notes.org:* where I take notes about Emacs
  - *config/emacs-config.org:* Emacs literate config
- Open emacs-config.org
- Type 'M-x org-babel-tangle' to create *init.el*
- Restart Emacs or type *M-x load-file* and reload ~/.emacs.d/init.el


* GENERAL

Set garbage-collector threschold high, during loading:

#+begin_src emacs-lisp

(setq gc-cons-threshold (* 50 1000 1000))

#+end_src

#+begin_src emacs-lisp

  (require 'package)
  (setq package-check-signature nil)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("nongnu" . "https://elpa.nongnu.org/nongnu/")                           
                           ("org" . "https://orgmode.org/elpa/")
                           ("gnu" . "https://elpa.gnu.org/packages/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)

  (setq use-package-always-ensure t)

  (use-package command-log-mode)

  (use-package auto-package-update
    :custom
    (auto-package-update-interval 7)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "8:00"))

  (setq backup-directory-alist '(("." . "~/.emacs.d/backups")))

#+end_src

#+RESULTS:
: ((. . ~/.emacs.d/backups))


** USE PACKAGES

#+begin_src emacs-lisp

  (use-package paredit)
  (use-package clojure-mode)
  (use-package clojure-mode-extra-font-locking)
  (use-package cider)
  (use-package tagedit)

#+end_src

** WHICH KEY

#+begin_src emacs-lisp

  (use-package which-key
    :ensure t
    :diminish
    :custom
    (which-key-idle-secondary-delay 0.01)
    (which-key-dont-use-unicode t)
    :config
    (which-key-mode t))

#+end_src

** IMPROVED PARENTHESES
#+begin_src emacs-lisp

  (use-package smartparens
    :ensure t
    :hook (prog-mode . smartparens-mode))

#+end_src
** PROJECTILE

#+begin_src emacs-lisp

(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  ;; NOTE: Set this to the folder where you keep your Git repos!
  (when (file-directory-p "~/")
    (setq projectile-project-search-path '("~/.dotfiles" "~/Multiverse" "~/Work" "~/SideProjects" "~/Study")))
  (setq projectile-switch-project-action #'projectile-dired))

#+end_src

#+RESULTS:
| lambda | nil | (interactive) | (use-package-autoload-keymap 'projectile-command-map 'projectile nil) |

** COUNSEL

#+begin_src emacs-lisp

(use-package counsel
  :bind (("C-M-j" . 'counsel-switch-buffer)
	 :map minibuffer-local-map
	 ("C-r" . 'counsel-minibuffer-history))
  :custom
  (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
  :config
  (counsel-mode 1))

#+end_src

** COUNSEL PROJECTILE

#+begin_src emacs-lisp

(use-package counsel-projectile
  :after projectile
  :config (counsel-projectile-mode))

#+end_src

** IVY

#+begin_src emacs-lisp

(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
	 :map ivy-minibuffer-map
	 ("TAB" . ivy-alt-done)
	 ("C-l" . ivy-alt-done)
	 ("C-j" . ivy-next-line)
	 ("C-k" . ivy-previous-line)
	 :map ivy-switch-buffer-map
	 ("C-k" . ivy-previous-line)
	 ("C-l" . ivy-done)
	 ("C-d" . ivy-switch-buffer-kill)
	 :map ivy-reverse-i-search-map
	 ("C-k" . ivy-previous-line)
	 ("C-d" . ivy-reverse-i-search-kill))
  :config
  (ivy-mode 1))

(use-package ivy-rich
  :init
  (ivy-rich-mode 1))


#+end_src

** HELPFUL

#+begin_src emacs-lisp

(use-package helpful
  :commands (helpful-callable helpful-variable helpful-command helpful-key)
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))

#+end_src

* USER INTERFACE
** UNDO TREE
#+begin_src emacs-lisp

  (use-package undo-tree
    :ensure t
    :init
    (global-undo-tree-mode))

#+end_src
** DISABLE STARTUP MESSAGE

   #+begin_src emacs-lisp

     (setq inhibit-startup-message t)

   #+end_src

** DISABLE BEEP

   #+begin_src emacs-lisp

     (setq visible-bell t)

   #+end_src

** DISABLE UI ELEMENTS

   #+begin_src emacs-lisp

     (scroll-bar-mode -1)
     (tool-bar-mode -1)
     (tooltip-mode -1)
     (set-fringe-mode 10)
     (menu-bar-mode -1)

   #+end_src

** SET FONT SIZES

   #+begin_src emacs-lisp

     (defvar default-font-size 140)
     (defvar default-variable-font-size 140)

   #+end_src

** RAINBOW DELIMITERS

#+begin_src emacs-lisp

  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

** TRANSPARENCY

   #+begin_src emacs-lisp

     (defvar frame-transparency '(88 . 88))

     (set-frame-parameter (selected-frame) 'alpha frame-transparency)
     (add-to-list 'default-frame-alist `(alpha . ,frame-transparency))

   #+end_src

   #+RESULTS:
   : ((fullscreen . maximized) (alpha 50 . 50) (vertical-scroll-bars) (left-fringe . 10) (right-fringe . 10))
** FRAME MAXIMIZED

#+begin_src emacs-lisp

  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

#+end_src

** ADD LINE NUMBERS

   #+begin_src emacs-lisp

     (column-number-mode)
     (global-display-line-numbers-mode t)

   #+end_src
** DISABLE LINE NUMBERS FOR CERTAIN MODES

   #+begin_src emacs-lisp
     (dolist (mode '(org-mode-hook
                     term-mode-hook
                     shell-mode-hook
                     eshell-mode-hook
                     vterm-mode-hook))
       (add-hook mode (lambda () (display-line-numbers-mode 0))))

   #+end_src

** FONTS

   #+begin_src emacs-lisp

     (set-face-attribute 'default nil :font "JetBrainsMonoMedium Nerd Font" :height default-font-size)
     (set-face-attribute 'fixed-pitch nil :font "JetBrainsMonoMedium Nerd Font" :height default-font-size)
     (set-face-attribute 'variable-pitch nil :font "JetBrainsMonoMedium Nerd Font" :height default-variable-font-size :weight 'regular)

   #+end_src

** ESC QUIT PROMPTS

   #+begin_src emacs-lisp

     (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

   #+end_src

** YES/NO to Y/N

   #+begin_src emacs-lisp

     (fset 'yes-or-no-p 'y-or-n-p)

   #+end_src

** THEMES

   SUGGESTED THEMES: doom-one, doom-dracula, doom-moonlight, doom-spacegrey, doom-outrun-electric, doom-palenight

   #+begin_src emacs-lisp

     (use-package doom-themes
       :init (load-theme 'doom-outrun-electric t))

     (use-package all-the-icons
       :ensure t)

     (use-package doom-modeline
       :ensure t
       :init (doom-modeline-mode 1)
       :config
       (setq doom-modeline-height 40)
       (setq doom-modeline-buffer-file-name-style 'relative-to-project)
       (setq doom-line-numbers-style 'relative)
       (setq doom-modeline-major-mode-icon t)
       (setq doom-modeline-buffer-state-icon t)
       (setq doom-modeline-major-mode-color-icon t))

   #+end_src

   #+RESULTS:

** BEACON

   #+begin_src emacs-lisp

     (use-package beacon
       :config
       (progn
         (beacon-mode 1)
         (setq beacon-size 10)
         (setq beacon-color "#ca6768")
         (setq beacon-blink-duration 0.2)
         (setq beacon-blink-when-window-scrolls t)
         (setq beacon-blink-when-window-changes t)
         (setq beacon-blink-when-point-moves-horizontally 20)
         (setq beacon-blink-when-point-moves-vertically 10)))

   #+end_src

** REPLACE BUFFER WITH IBUFFER

   #+begin_src emacs-lisp
     
     (global-set-key (kbd "C-x C-b") #'ibuffer)

   #+end_src

** FLYSPELL
#+begin_src emacs-lisp

  (use-package flyspell
    :hook
    ((prog-mode . flyspell-prog-mode)
     (text-mode . turn-on-flyspell))
    :config
    (flyspell-mode +1))

#+end_src
** FLYCHECK
#+begin_src emacs-lisp

  (use-package flycheck
    :init
    (setq-default flycheck-disabled-checkers '(python-mypy))
    :config
    (setq flycheck-check-syntax-automatically '(save mode-enable))
    (setq flycheck-scheme-chicken-executable "chicken-csc")
    :hook
    (after-init . global-flycheck-mode))

#+end_src
** FILE BROWSERS
#+begin_src emacs-lisp
  (use-package ranger
    :ensure t
    :disabled
    :config
    (setq ranger-preview-file t))

  (use-package neotree
    :ensure t
    :bind ("<f8>" . 'neotree-toggle)
    :init
    ;; slow rendering
    (setq inhibit-compacting-font-caches t)
    ;; set icons theme
    (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
    (setq neo-smart-open t))

  (use-package all-the-icons-dired
    :ensure t)

  (use-package dired
    :ensure nil
    :custom ((dired-listing-switches "-agho --group-directories-first"))
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :hook
    (dired-mode . all-the-icons-dired-mode))

  (use-package dired-single :ensure t)
#+end_src
** ACE WINDOW
#+begin_src emacs-lisp

  (use-package ace-window
    :ensure t
    :init (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)
                aw-char-position 'left
                aw-ignore-current nil
                aw-leading-char-style 'char
                aw-scope 'frame)
    :bind (("M-o" . ace-window)
           ("M-O" . ace-swap-window)))

#+end_src
** EMOJIS IN EMACS
#+begin_src emacs-lisp

(use-package emojify
:hook (after-init . global-emojify-mode))

#+end_src
* ORG MODE

*org-src-tab-acts-natively*: the effect of *TAB* in a code block is the same as in the language major mode buffer.

#+begin_src emacs-lisp

  (defun org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1))

  (defun org-font-setup ()
    (font-lock-add-keywords 'org-mode
                            '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))


    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "JetBrainsMonoMedium Nerd Font" :weight 'regular :height (cdr face)))

    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

  (use-package org
    :hook (org-mode . org-mode-setup)
    :config
    (setq org-ellipsis " ▾")

    ;;(setq org-startup-folded "showall")
    (setq org-src-tab-acts-natively t) ;; preserver code blocks identation
    (setq org-agenda-start-with-log-mode t)
    (setq org-log-done 'time)
    (setq org-log-into-drawer t)
    (setq org-agenda-window-setup 'current-window) ;; avoids agenda to destroy window splits

    (setq org-directory "~/Multiverse/")
    (setq org-agenda-files '("tasks.org" "birthdays.org" "archive.org" "habits.org"))

    (require 'org-habit)
    (add-to-list 'org-modules 'org-habit)
    (setq org-habit-graph-column 60)

    (setq org-todo-keywords
          '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!)")
            (sequence "BACKLOG(b)" "PLAN(p)" "READY(r)" "ACTIVE(a)" "REVIEW(v)" "WAIT(w@/!)" "HOLD(h)" "|" "COMPLETED(c)" "CANC(k@)")))


    (setq org-refile-targets
          '(("archive.org" :maxlevel . 1)
            ("tasks.org" :maxlevel . 1)))

    ;; Save Org buffers after refiling!
    (advice-add 'org-refile :after 'org-save-all-org-buffers)

    (setq org-tag-alist
          '((:startgroup)
                                          ; Put mutually exclusive tags here
            (:endgroup)
            ("@errand" . ?E)
            ("@home" . ?H)
            ("@work" . ?W)
            ("agenda" . ?a)
            ("planning" . ?p)
            ("publish" . ?P)
            ("batch" . ?b)
            ("note" . ?n)
            ("idea" . ?i)))



    ;; Configure custom agenda views
    (setq org-agenda-custom-commands
          '(("d" "Dashboard"
             ((agenda "" ((org-deadline-warning-days 7)))
              (todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))
              (tags-todo "agenda/ACTIVE" ((org-agenda-overriding-header "Active Projects")))))

            ("n" "Next Tasks"
             ((todo "NEXT"
                    ((org-agenda-overriding-header "Next Tasks")))))


            ("W" "Work Tasks" tags-todo "+work")
            ("S" "Study Tasks" tags-todo "+study")
            ("H" "House Chores" tags-todo "+housechores")

            ;; Low-effort next actions
            ("e" tags-todo "+TODO=\"NEXT\"+Effort<15&+Effort>0"
             ((org-agenda-overriding-header "Low Effort Tasks")
              (org-agenda-max-todos 20)
              (org-agenda-files org-agenda-files)))

            ("w" "Workflow Status"
             ((todo "WAIT"
                    ((org-agenda-overriding-header "Waiting on External")
                     (org-agenda-files org-agenda-files)))
              (todo "REVIEW"
                    ((org-agenda-overriding-header "In Review")
                     (org-agenda-files org-agenda-files)))
              (todo "PLAN"
                    ((org-agenda-overriding-header "In Planning")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "BACKLOG"
                    ((org-agenda-overriding-header "Project Backlog")
                     (org-agenda-todo-list-sublevels nil)
                     (org-agenda-files org-agenda-files)))
              (todo "READY"
                    ((org-agenda-overriding-header "Ready for Work")
                     (org-agenda-files org-agenda-files)))
              (todo "ACTIVE"
                    ((org-agenda-overriding-header "Active Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "COMPLETED"
                    ((org-agenda-overriding-header "Completed Projects")
                     (org-agenda-files org-agenda-files)))
              (todo "CANC"
                    ((org-agenda-overriding-header "Cancelled Projects")
                     (org-agenda-files org-agenda-files)))))))


    (setq org-capture-templates
          `(("t" "Tasks / Projects")
            ("tt" "Task" entry (file+olp "~/Multiverse/tasks.org" "INBOX")
             "* TODO %?\n  %U\n  %a\n  %i" :empty-lines 1)

            ("j" "Journal Entries")
            ("jj" "Journal" entry
             (file+olp+datetree "~/Multiverse/journal.org")
             "\n* %<%I:%M %p> - Journal :journal:\n\n%?\n\n"
             ;; ,(dw/read-file-as-string "~/Notes/Templates/Daily.org")
             :clock-in :clock-resume
             :empty-lines 1)
            ("jm" "Meeting" entry
             (file+olp+datetree "~/Multiverse/journal.org")
             "* %<%I:%M %p> - %a :meetings:\n\n%?\n\n"
             :clock-in :clock-resume
             :empty-lines 1)

            ("w" "Workflows")
            ("we" "Checking Email" entry (file+olp+datetree "~/Multiverse/journal.org")
             "* Checking Email :email:\n\n%?" :clock-in :clock-resume :empty-lines 1)

            ("m" "Metrics Capture")
            ("mw" "Weight" table-line (file+headline "~/Multiverse/metrics.org" "Weight")
             "| %U | %^{Weight} | %^{Notes} |" :kill-buffer t)))

    (define-key global-map (kbd "C-c j")
      (lambda () (interactive) (org-capture nil "jj")))

    (org-font-setup))

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    ;; (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●"))
    (org-bullets-bullet-list '( "●" "○" "●" "○" "●" "○" "●")))

  (defun org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :hook (org-mode . org-mode-visual-fill))


  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)))

  (setq org-confirm-babel-evaluate nil)


  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))

#+end_src

#+RESULTS:
: ((py . src python) (el . src emacs-lisp) (sh . src shell) (a . export ascii) (c . center) (C . comment) (e . example) (E . export) (h . export html) (l . export latex) (q . quote) (s . src) (v . verse))

* ORG ROAM

#+begin_src emacs-lisp

  (setq org-directory (concat (getenv "HOME") "/Multiverse/Zettelkasten"))

  (use-package org-roam
    :after org
    :init (setq org-roam-v2-ack t) ;; Acknowledge V2 upgrade
    :custom
    (org-roam-directory (file-truename org-directory))
    (org-roam-completion-everywhere t)
    :config
    (org-roam-setup)
    :bind (
           ("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n r" . org-roam-node-random)		    
           (:map org-mode-map
                 (("C-c n i" . org-roam-node-insert)
                  ("C-c n o" . org-id-get-create)
                  ("C-c n t" . org-roam-tag-add)
                  ("C-c n a" . org-roam-alias-add)
                  ("C-c n l" . org-roam-buffer-toggle)))))

#+end_src

#+RESULTS:
: org-roam-buffer-toggle

* EDITING

  #+begin_src emacs-lisp
  
  (global-set-key (kbd "M-/") 'hippie-expand)

  (setq hippie-expand-try-functions-list
  '(try-expand-dabbrev
  try-expand-dabbrev-all-buffers
  try-expand-dabbrev-from-kill
  try-complete-lisp-symbol-partially
  try-complete-lisp-symbol))


  (show-paren-mode 1)

  (global-hl-line-mode 1)

  (setq-default indent-tabs-mode nil)


  (require 'saveplace)
  (setq-default save-place t)
  (setq save-place-file (concat user-emacs-directory "places"))


  (defun toggle-comment-on-line ()
  (interactive)
  (comment-or-uncomment-region (line-beginning-position) (line-end-position)))
  (global-set-key (kbd "C-;") 'toggle-comment-on-line)

  (defun die-tabs ()
  (interactive)
  (set-variable 'tab-width 2)
  (mark-whole-buffer)
  (untabify (region-beginning) (region-end))
  (keyboard-quit))


  (defun ns-get-pasteboard ()
  (condition-case nil
  (ns-get-selection-internal 'CLIPBOARD)
  (quit nil)))
  
  (setq electric-indent-mode nil)
 
  (defun move-line (n)
  (interactive "p")
  (setq col (current-column))
  (beginning-of-line) (setq start (point))
  (end-of-line) (forward-char) (setq end (point))
  (let ((line-text (delete-and-extract-region start end)))
  (forward-line n)
  (insert line-text)
  (forward-line -1)
  (forward-char col)))

  #+end_src

* ELISP EDITING

  #+begin_src emacs-lisp

    (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
    (add-hook 'emacs-lisp-mode-hook #'enable-paredit-mode)
    (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
    (add-hook 'ielm-mode-hook #'enable-paredit-mode)
    (add-hook 'lisp-mode-hook #'enable-paredit-mode)
    (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
    (add-hook 'scheme-mode-hook #'enable-paredit-mode)
    (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
    (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
    (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)

  #+end_src

* MAGIT

  #+begin_src emacs-lisp

    (use-package magit
      :commands magit-status
      :custom
      (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

    (use-package forge
      :after magit)

  #+end_src

* CLOJURE

#+begin_src emacs-lisp

  (add-hook 'clojure-mode-hook 'enable-paredit-mode)
  (add-hook 'clojure-mode-hook 'subword-mode)
  (require 'clojure-mode-extra-font-locking)
  (add-hook 'clojure-mode-hook
            (lambda ()
              (setq inferior-lisp-program "lein repl")
              (font-lock-add-keywords
               nil
               '(("(\\(facts?\\)"
                  (1 font-lock-keyword-face))
                 ("(\\(background?\\)"
                  (1 font-lock-keyword-face))))
              (define-clojure-indent (fact 1))
              (define-clojure-indent (facts 1))
              (rainbow-delimiters-mode)))

  (add-hook 'cider-mode-hook 'eldoc-mode)

  (setq cider-repl-pop-to-buffer-on-connect t)
  (setq cider-show-error-buffer t)
  (setq cider-auto-select-error-buffer t)
  (setq cider-repl-history-file "~/.emacs.d/cider-history")
  (setq cider-repl-wrap-history t)

  (add-hook 'cider-repl-mode-hook 'paredit-mode)
  (add-to-list 'auto-mode-alist '("\\.edn$" . clojure-mode))
  (add-to-list 'auto-mode-alist '("\\.boot$" . clojure-mode))
  (add-to-list 'auto-mode-alist '("\\.cljs.*$" . clojure-mode))
  (add-to-list 'auto-mode-alist '("lein-env" . enh-ruby-mode))

  (defun cider-start-http-server ()
    (interactive)
    (cider-load-current-buffer)
    (let ((ns (cider-current-ns)))
      (cider-repl-set-ns ns)
      (cider-interactive-eval (format "(println '(def server (%s/start))) (println 'server)" ns))
      (cider-interactive-eval (format "(def server (%s/start)) (println server)" ns))))
  (defun cider-refresh ()
    (interactive)
    (cider-interactive-eval (format "(user/reset)")))

  (defun cider-user-ns ()
    (interactive)
    (cider-repl-set-ns "user"))

  (eval-after-load 'cider
    '(progn
       (define-key clojure-mode-map (kbd "C-c C-v") 'cider-start-http-server)
       (define-key clojure-mode-map (kbd "C-M-r")   'cider-refresh)
       (define-key clojure-mode-map (kbd "C-c u")   'cider-user-ns)
       (define-key cider-mode-map   (kbd "C-c u")   'cider-user-ns)))

#+end_src

* TREEMACS
#+begin_src emacs-lisp

  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
            treemacs-deferred-git-apply-delay        0.5
            treemacs-directory-name-transformer      #'identity
            treemacs-display-in-side-window          t
            treemacs-eldoc-display                   'simple
            treemacs-file-event-delay                5000
            treemacs-file-extension-regex            treemacs-last-period-regex-value
            treemacs-file-follow-delay               0.2
            treemacs-file-name-transformer           #'identity
            treemacs-follow-after-init               t
            treemacs-expand-after-init               t
            treemacs-find-workspace-method           'find-for-file-or-pick-first
            treemacs-git-command-pipe                ""
            treemacs-goto-tag-strategy               'refetch-index
            treemacs-indentation                     2
            treemacs-indentation-string              " "
            treemacs-is-never-other-window           nil
            treemacs-max-git-entries                 5000
            treemacs-missing-project-action          'ask
            treemacs-move-forward-on-expand          nil
            treemacs-no-png-images                   nil
            treemacs-no-delete-other-windows         t
            treemacs-project-follow-cleanup          nil
            treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
            treemacs-position                        'left
            treemacs-read-string-input               'from-child-frame
            treemacs-recenter-distance               0.1
            treemacs-recenter-after-file-follow      nil
            treemacs-recenter-after-tag-follow       nil
            treemacs-recenter-after-project-jump     'always
            treemacs-recenter-after-project-expand   'on-distance
            treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
            treemacs-show-cursor                     nil
            treemacs-show-hidden-files               t
            treemacs-silent-filewatch                nil
            treemacs-silent-refresh                  nil
            treemacs-sorting                         'alphabetic-asc
            treemacs-select-when-already-in-treemacs 'move-back
            treemacs-space-between-root-nodes        t
            treemacs-tag-follow-cleanup              t
            treemacs-tag-follow-delay                1.5
            treemacs-text-scale                      nil
            treemacs-user-mode-line-format           nil
            treemacs-user-header-line-format         nil
            treemacs-wide-toggle-width               70
            treemacs-width                           50
            treemacs-width-increment                 1
            treemacs-width-is-initially-locked       t
            treemacs-workspace-switch-cleanup        nil)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)

      (pcase (cons (not (null (executable-find "git")))
                   (not (null treemacs-python-executable)))
        (`(t . t)
         (treemacs-git-mode 'deferred))
        (`(t . _)
         (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil))
    :bind
    (:map global-map
          ("M-p"       . treemacs-select-window)
          ("C-x t 1"   . treemacs-delete-other-windows)
          ("M-0"   . treemacs)
          ("C-x t d"   . treemacs-select-directory)
          ("C-x t B"   . treemacs-bookmark)
          ("C-x t C-t" . treemacs-find-file)
          ("C-x t M-t" . treemacs-find-tag)))

  (use-package treemacs-projectile
    :after (treemacs projectile)
    :ensure t)

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :ensure t)

  (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)

  (use-package treemacs-tab-bar
    :after (treemacs)
    :ensure t
    :config (treemacs-set-scope-type 'Tabs))

#+end_src
* TERM MODES
** TERM 

#+begin_src emacs-lisp

  (use-package term
    :config
    (setq explicit-shell-file-name "zsh")
    ;;(setq explicit-zsh-args '())
    (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *"))


  (use-package eterm-256color
    :hook (term-mode . eterm-256color-mode))


#+end_src

#+RESULTS:
| eterm-256color-mode | (lambda nil (display-line-numbers-mode 0)) |

** VTERM

To run vterm you'll need CMake and libtool.
*Cmake* can be installed in PopShop.
*Libtool* can be installed in PopOs by running `sudo apt-get install libtool-bin`

#+begin_src emacs-lisp

  (use-package vterm
    :ensure t
    :preface
    (defun vterm-mode-hook ()
      (hl-line-mode -1)
      (display-line-numbers-mode -1)
      (display-fill-column-indicator-mode -1)
      (auto-fill-mode -1))
    :hook
    ((vterm-mode . vterm-mode-hook))
    :custom
    (vterm-module-cmake-args " -DUSE_SYSTEM_LIBVTERM=yes")
    (vterm-always-compile-module t)
    (vterm-kill-buffer-on-exit t)
    (vterm-max-scrollback 10000)
    :init
    (which-key-add-key-based-replacements "C-c t" "term")
    :config
    ;; Add find-file-other-window to accepted commands
    (setq vterm-shell (executable-find "zsh"))
    (add-to-list 'vterm-eval-cmds
                 '("find-file-other-window" find-file-other-window)))

  (use-package vterm-toggle
    :ensure t
    :bind (("C-c j" . vterm-toggle-cd)
           :map vterm-mode-map
           (("<C-return>" . vterm-toggle-insert-cd)
            ("C-M-n" . vterm-toggle-forward)
            ("C-M-p" . vterm-toggle-backward)))
    :custom
    (vterm-toggle-scope 'project)
    (vterm-toggle-project-root t)
    (vterm-toggle-fullscreen-p nil)
    :config
    ;; Show at bottom
    (add-to-list 'display-buffer-alist
                 '((lambda(bufname _)
                     (with-current-buffer bufname
                       (equal major-mode 'vterm-mode)))
                   ;; (display-buffer-reuse-window display-buffer-at-bottom)
                   (display-buffer-reuse-window display-buffer-in-direction)
                   ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                   (direction . bottom)
                   (dedicated . t) ;dedicated is supported in emacs27
                   (reusable-frames . visible)
                   (window-height . 0.3))))

#+end_src

#+RESULTS:

* EMACS STARTUP TIME

#+begin_src emacs-lisp

  (defun display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                      (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'display-startup-time)

#+end_src

Bring garbage collector down:

#+begin_src emacs-lisp

  (setq gc-cons-threshold (* 2 1000 1000))

#+end_src

* AUTO TANGLE

Automatically tangle emacs-config.org file we saved.

#+begin_src emacs-lisp

  (defun org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.dotfiles/emacs/config/emacs-config.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

    (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'org-babel-tangle-config)))


#+end_src
