#+TITLE: EMACS NOTES
#+AUTHOR: Eduardo Vedes
#+DATE: 2022-05-04
#+OPTIONS: toc:2 num:nil
#+STARTUP: content

Where I take notes about my Emacs learning.
This file can be seen [[https://github.com/evedes/.dotfiles/blob/master/emacs/notes/emacs-notes.org][here]], on my GitHub .dotfiles repo.

* EMACS

"My adventure Learning Emacs and Everything Lispian"

** QUOTES

“I’m using Linux. A library that emacs uses to communicate with Intel hardware.”

"I use Emacs, which might be thought of as a thermonuclear word processor." 
- Neal Stephenson, "In the Beginning... was the Command Line"

"An infinite number of monkyes typing into GNU Emacs would never make a good program."
- Linus Torvalds, Linux Kernel Coding Style Documentation

** FLEETING NOTES

*** How to get info about a function?

M-x describe function RET
and then enter the name of the function you want to know about

*** How to find missing parens?

To find missing parens, run *M-x check-parens* in the file you want to check.
It's helpful to "debug" errors in init.el, as an example.

*** How to swap windows?

Do *M-x window-swap-states*

*** Emacs uptime

Hit 'M-x emacs-uptime'

n** SHORTCUTS

| Command            | Description                                     |
| -                  | -                                               |
| C-p or Up Arrow    | Move cursor one line up                         |
| C-n or Down Arrow  | Move cursor one line down                       |
| C-b or Left Arrow  | Move cursor back                                |
| C-f or Right Arrow | Move cursor forward                             |
| M-<                | Move cursor to the beginning of the file        |
| M->                | Move cursor to the end of the file              |
| C-l                | Scroll current line to center                   |
| C-d or DEL         | Delete the character after the cursor           |
| BACKSPACE          | Delete the character before the cursor          |
| C-k                | Kill to the end of the line                     |
| M-d                | Kill forward till the end of the next word      |
| M-DEL              | Kill back to the beginning of the previous word |
| M-BACKSPACE        | Kill back to the beginning of the previous word |
| C-x 0              | Delete window                                   |
| C-x 1              | Delete other windows                            |
| C-x 2              | Split window below                              |
| C-x 3              | Split window right                              |
| C-c C-c            | Run a code block                                |
| C-c C-l            | Create a link                                   |
| C-c C-o            | Open a link                                     |
| C-x g              | Magit Status                                    |
| C-c $              | Add word to dictionary                          |
| C-_ or C-/         | Undo                                            |
| M-_ or C-?         | Redo                                            |
| C-h i or M-x info  | Access Emacs' info reader                       |
| C-h R              | Open a manual (only in Emacs 28)                |
| C-h a              | Apropos                                         |
| C-x 5              | Prefix use for frames                           |
| C-x 5 2            | Create a new frame                              |
| C-x r m            | Set a bookmark                                  |
| C-x r l            | List bookmarks                                  |
| C-x r b            | Jump to a bookmark                              |
| M-g M-g            | Go to line                                      |
| C-c n a            | Add org-roam alias to an org file               |

** GENERAL NOTES

Emacs is for unicorns, which means "Unique Organizers". That's the why of the unicorn symbol

** EMACS MANUAL NOTES

*** MAJOR MODES

Every buffer processes a major mode.
This determines the behavior of Emacs while in that buffer.
The mode line usually shows the name of the current major mode. 

The least specialized major mode is called *Fundamental model*
This mode has no mode-specific redefinitions or variable settings.

Most major modes fall into three major groups.
The first group contains modes for normal text, either plain or with mark-up (text, html, sgml, tex, outline).
The second group contains modes for specific programming languages (Lisp, C, Fortran, others)

The third group consists of major modes that are not associated directly with files; they are used in buffers created for specific purposes by Emacs.

Examples include:
- Dired mode for buffers made by Dired
- Message mode for buffers made by *C-x m*
- Shell mode for buffers used to communicate with an inferior shell process.

Emacs usually sets the major mode automatically, when you first visit a file or create a buffer.
You can switch to another mode by using an M-x command.
Press M-x and then write the name of the mode followed by -mode.
There's noway to "turn off" a major mode. Instead you must switch to a different one.

The default of major-mode determines the major mode to use for files that do not specify a major mode, and for new buffers created with C-x b.

More about Major Modes [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Major-Modes.html#:~:text=It%20includes%20Text%20mode%2C%20HTML,%2C%20Fortran%20mode%2C%20and%20others][here]].

** BACKUP FILES

Emacs doesn't create backup files on version controlled folders.
Emacs backup files usually end with a tilde *~*.

In my literate config, backups are set to be stored on *~/.emacs.d/backups/*.

You can disable backups by doing:

#+begin_src emacs-lisp

  (setq make-backup-files nil)

#+end_src

#+end_src

** AUTO SAVE FILES

Will create temp files in the same folder as edited files.
I've tweaked config for them to be saved in *~/.emacs/auto-saves/*

** LOCK FILES

These are files that look like *.#Emacs.org*. They appear when you have unsaved changes to a file in a buffer.

Unfortunately, these can't be moved, but they can be disabled. No problem to disable it since it only prevents other instances or people to modify the files while they're being edited.

** EMACS PACKAGES

*** PROJECTILE
**** How to switch project?

Hit *'C-p p'* to see the list of the projects

Hit *'C-p p f'* to find a file inside the projects folders

*** IBUFFER

**** How to open IBuffer?

Hit *C-x C-b*

**** How to kill a Buffer?

If you just want to kill one buffer, press *x* over the buffer line.

If you want to kill more than one buffer, position the cursor in the line of the buffer and mark it with *d* 

To unmark you can hit *u*

When all your buffers are correctly marked, hit *x* to commit changes.

*** WINDMOVE
**** How to move around windows?

You can use *Super + Arrow Keys* to move around windows.

** NO LITTERING!

One community-maintained solution for this is the package *no-littering* : [[https://github.com/emacscollective/no-littering][no-littering]]
Even if you don't want to use it, the settings it applies are very useful to learn what you might want to set!

** ORG MODE
*** How to check which orgmode version I'm using?

*M-x org-version*

*** Mimetype

The de facto mimetype for Org files is text/org. Org files use the *.org* extension

*** Preamble

At the start of a file (before the first heading), it is common to set the title, author and other export options.

Please, check the top of the current file.

*** Heading

Lines that start with an asterisk * are HEADINGS.

A single * denotes a 1st-level heading, ** denotes a 2nd-level heading, etc.


A single * denotes a 1st-level heading, a ** denotes a 2nd-level heading, etc.

In their simplest form, headings are just the start of a section.
Any heading can also become a TODO.

TODO items are the basic building block that Org uses to track and organize all kinds of tasks.

To add a TODO item to a heading, start the heading with a TODO keyword, such as TODO or HOLD.

To toggle all Headings, You just need to press *Shift+Tab*
To toggle just one Heading, press *Tab* on top of that heading

To create an heading of the same type you're hovering, just put the cursor on top or below of the heading you want to replicate, /i.e: a 3 start heading/, and press *C+RETURN*.

*** Markup

To mark up text in Org, simply surround it with one or more marker characters.
*Bold*, /italic/ and _underline_ are fairly intuitive, and the ability to use +strikethrough+ is a plus.

You can _/*combine*/_ the basic markup in any order however ~code~  and =verbatim= need to be the *_~inner-most~_* markers if they are present since their contents are interpreted =_literally_=.

You can read more about [[https://orgmode.org/worg/dev/org-syntax.html#Emphasis_Markers][emphasis markers]] here.

*** Lists

Unordered lists start with +, - or *. Ordered lists start with 1., 1), A. or A). Ordered and unordered bullets can be nested in any order.

To buy:
1. Milk
2. Eggs
   - Organic
3. Cheese
   + Parmesan
   + Mozzarella

Lists can contain checkboxes [ ], [-], [X].

- [ ] not started
- [-] in progress
- [X] complete

Lists can contain tags (and checkboxes at the same time).

- [ ] fruits :: get apples
- [ ] veggies :: get carrots

*** Links

To create a link put the target between two square brackets, like so: [[target]]. You can include a description in square brackets after the target [[target][desc]].

To write a link you can hit *C-c C-l*
To open a link you can hit *C-c C-o* while cursor is hover the link.

*** Images

[[~/Downloads/sky.jpg]]


*** How to add a literal Example?

Make sure what you want to write is wrapped in

#+BEGIN_EXAMPLE
  something something
#+END_EXAMPLE

*** How to create a table?

| Name      | Age | Use Emacs |
| -         |   - | -         |
| David     |  37 | Yes       |
| Edo       |  42 | Yes       |
| John      |  21 | No        |
| Alexander |  52 | No        |

Tables ajust automatically, when you press *TAB*

*** How to create a spreasheet?

| Student  | Maths | Physics |   Average |
|----------+-------+---------+-----------|
| Bertrand |    13 |      09 |        11 |
| Henri    |    15 |      14 |      14.5 |
| Arnold   |    17 |      13 |        15 |
| Edward   |    10 |      20 |        15 |

#+TBLFM: $4=vmean($2..$3)

Create a table using *C-|*
How to discover a cell reference? Go to the cell and hit *C-c ?*
How to see table's lines/cols? Hit *C-c }*
How to add a table separator row? *C-c -*
How to spread calculation along column *C-u C-c **
How to edit a column formula? C-c =
How to edit a cell formula? C-u C-c =

*** How to create a bulleted / numbered list / checklist?

- [X] First Item      
- [ ] Second Item
- [X] Third Item

You can check/uncheck an item running *C-c C-x C-b*
You can hit *Shift+Alt+Enter* to add more checkboxes

*** How to add a code block?

#+begin_src emacs-lisp
  (defun my-elisp-func ()
    (message "Hello, world!"))
#+end_src

*** How to set an org file initial visibility


To set initial visibility you can add to the top of the file one of the following lines:

#+begin_src

#+STARTUP: overview
#+STARTUP: content
#+STARTUP: showall
#+STARTUP: show2levels
#+STARTUP: show3levels
#+STARTUP: show4levels
#+STARTUP: show5levels
#+STARTUP: showeverything

#+end_src

** ORG ROAM

It's inspired by a program called *Roam* and a note-taking strategy called *"Zettelkasten"*, where the goal is to create many individual single-topic notes that are linked together to create a "networked" knowledge base.
Many people consider it like a "second brain". It can easily handle a huge amount of knowledge and reminding you of connections between topics very effectively.

*** Prerequisites

Org Roam v2 depends on a customized build of the SQLite database tool to operate.
For Linux and MacOS users, make sure you have a C/C++ compiler like *gcc* or *clang* installed.
Database enables Org Roam to keep track of all of the "nodes" that you create and the links between them *very* efficiently.

*** Basic Configuration

After Org Roam has been installed, the most important thing to configure is the folder where your Org Roam files will be located.

*** How to link between nodes?

We link between nodes using org's standard ID link (e.g. id:foo). while only ID links will be considered during the computation of links between nodes, org-roam caches all other links in the documents for external use.

*** Org-roam Sync

We sync org-roam on startup (check emacs-config.org).
If we need to sync it manually just hit *M-x org-roam-db-sync*

*** Creating nodes

You can use *org-roam-node-insert* (C-c n i), or *org-roam-node-find* (C-c n f) which in case it doesn't  find the node, it creates a new one.

*org-roam-capture* creates a node if it does not exist, and restores the current window configuration upon completion.

*** Caching & How to Cache?

Org-roam uses a sqlite database to perform caching, but there are multiple Emacs libraries that can be used. The default is *emacs-sqlite*

By default, all nodes are cached by org-roam.

*** The Org-roam Buffer

Org-roam provides a buffer: an interface to view relationships with other nodes (backlinks, reference links, unlinked references, etc.)

There are two main commands here:

*org-roam-buffer-toggle* (C-c n l), which launches an org-roam buffer that tracks the node currently at point. This means that the content of the buffer changes as the point is moved, if necessary.

*org-roam-buffer-display-dedicated*, which launches an org-roam buffer for a specific node without visiting its file.

*** Node Properties
**** Standard Org properties

Org-roam caches most of the standard Org properties. The full list now includes:
- outline level
- todo state
- priority
- scheduled
- deadline
- tags

**** Titles and Aliases

Each node has a single title. For the file nodes, this is specified with the '#+title' property for the file.

For headline nodes, this is the main text.

Nodes can also have multiple aliases. Aliases allow searching for nodes via an alternative name. For example, one may want to assign a well-known (AI) to a node title "Artificial Intelligence".

Just add :ROAM_ALIASES: AI just bellow :PROPERTIES: and it will work.

Org-roam provides some functions to add or remove aliases

*org-roam-alias-add* (C-c n a)
*org-roam-alias-remove*

**** Tags

Tags for top-level (file) nodes are pulled from the variable *org-file-tags*, which is set by the #+filetags keyword, as well as other tags the file may have inherited.

Tags are inherited by headers within the file.
This makes it impossible for selective tag inheritance: i.e. either tag inheritance is turned off, or all headline nodes will inherit the tags from the file node. This is a design compromise of Org-roam.

**** Refs

Refs are unique identifiers for nodes. These keys allow references to the key to show up in the org-roam buffer. For example, a node for a website may use the URL as the ref, and a node for a paper may use an org-ref citation key.

If we add :ROAM_REFS: https://www.google.com/

And another node links to the same URL, it will show up as a "reference backlink".

These keys also come in useful for when taking website notes, using the roam-ref protocol.

See [[https://www.orgroam.com/manual.html#org_002droam_002dprotocol][org-roam-protocol]] for more info on that.

Org-roam provides functions to add/remove refs:

*org-roam-ref-add*
*org-roam-ref-remove*

**** Citations

Org has first-class support for citations. It supports the caching of both these in-built citations *[cite:@key]* and org-ref citations (of form *cite:key*).

You can add a citation by adding :ROAM_REFS: @key or :ROAM_REFS: [cite:@key]

When another node has a citation for that key, we can see it using the RefLinks section of the Org-roam buffer.

*** Completion

**** TODO Investigate Completions in org-roam

*** The Templating System

Org-roam extends the *org-capture* system, providing a smoother note-taking experience.
These extensions mean org-roam capture templates are incompatible with the org-capture templates.

Org-roam's templates are specified by *org-roam-capture-templates*

**** TODO Investigate Templates in org-roam. Here's the [[https://www.orgroam.com/manual.html#Getting-Started][link]] to the point 12.1 of the manual.

*** Extensions

**** org-roam-protocol

To enable org-roam-protocol, simply add the following to your init file:

#+begin_src emacs-lisp

(require 'org-roam-protocol)

#+end_src

**** org-roam-graph

Org-roam provides basic graphing capabilities to explore interconnections between notes, in *org-roam-graph* This is done by performing SQL queries and generating images using Graphviz.

**** org-roam-dailies

Org-roam provides journaling capabilities akin to org-journal with *org-roam-dailies*

**** org-roam-export

Because Org-roam files are plain org files, they can be exported easily using *org-export* to a variety of formats (including html and pdf).

*** Performance Optimization

**** Garbage Collection

During the cache-build process, Org-roam generates a lot of in-memory data-structures which are discarded after use. These structures are garbage collected at regular intervals.

Org-roam provides the option *org-roam-db-gc-threshold* to temporarily change the threshold value for GC to be triggered during these memory-intensive operations.

To reduce the number of garbage collection processes, one may set *org-roam-db-gc-threshold* to a high value:

#+begin_src emacs-lisp :results silent

(setq org-roam-db-gc-threshold most-positive-fixnum)

#+end_src

*** Org-download

**** TODO Learn how to use org-download

*** How to do fast note insertion

Sometimes you want to create a node, but you don't want the node to open.

This piece of code will allow you to do this:

#+begin_src emacs-lisp :results silent

  ;; Bind this to C-c n I
  (defun org-roam-node-insert-immediate (arg &rest args)
    (interactive "P")
    (let ((args (cons arg args))
          (org-roam-capture-templates (list (append (car org-roam-capture-templates)
                                                    '(:immediate-finish t)))))
      (apply #'org-roam-node-insert args)))

#+end_src

*** How to build your Org agenda from Org Roam notes

One of the most useful features of Org Mode is the agenda view. You can actually use your Org Roam notes as the source for this view.

Typically you won't want to pull in *all* of your Org Roam notes, so we'll only use the notes with a specific tag like =Project=.

Here is a snippet that will find all the notes with a specific tag and then set your *org-agenda-list* with the corresponding note files.

#+begin_src emacs-lisp :results silent

;; The buffer you put this code in must have lexical-binding set to t!
;; See the final configuration at the end for more details.

(defun my/org-roam-filter-by-tag (tag-name)
  (lambda (node)
    (member tag-name (org-roam-node-tags node))))

(defun my/org-roam-list-notes-by-tag (tag-name)
  (mapcar #'org-roam-node-file
          (seq-filter
           (my/org-roam-filter-by-tag tag-name)
           (org-roam-node-list))))

(defun my/org-roam-refresh-agenda-list ()
  (interactive)
  (setq org-agenda-files (my/org-roam-list-notes-by-tag "Project")))

;; Build the agenda list the first time for the session
(my/org-roam-refresh-agenda-list)

#+end_src

*** Selecting from a list of notes with a specific tag


** ORGANIZING YOUR LIFE WITH ORGMODE
[[https://orgmode.org/manual/Agenda-Commands.html][Commands in the Agenda Buffer]]
*** How to Open the Agenda?

*M-x org-agenda*

*** How to quit Agenda?

Just press *q*

*** How to add a Task/TODO?

OrgMode comes with two states: TODO and DONE
You can add more states.

**** TODO Do something great!

:LOGBOOK:
- State "TODO"       from "WAIT"       [2022-06-01 Wed 16:23]
- State "DONE"       from "NEXT"       [2022-05-12 Thu 23:04]
- State "HOLD"       from "WAIT"       [2022-05-12 Thu 23:04]
- State "DONE"       from "NEXT"       [2022-05-12 Thu 23:04]
:END:

You can toggle a todo with *C-c C-t* or with *Shift+Right* while in the TODO line.

*** How to schedule a Task?

Put the cursor on the task line
oDo *M-x org-schedule*, or *C-c C-s*
A calendar will appear, and you can move with *Shift+Arrow Keys*

*** How to add a deadline to a Task?

Put the cursor on the task line
Do *M-x org-deadline*, or *C-c C-d*
A calendar will appear, and you can move with *Shift+Arrow Keys*

There's a variable called org-deadline-warning-days (check it with describe variable)

*** Recurring tasks

Example:

TODO Pay phone bill.
SCHEDULED <2021-05-07 Mon 18:00 +1m>

+1y - repeat yearly
+1m - repeat monthly
+2w - repeat biweekly
+3d - repeat after 3 days
+8h - repeat after 8 hours

Advanced usage:

**** TODO Call Father
DEADLINE: <2017-12-10 Sun ++1w>
Marking this DONE shifts the date by at least one week, but also by as many weeks as it takes to get this date into the future. However, it stays on a Sunday, even if you called and marked it done on a Saturday.

**** TODO Empty Kitchen Trash
DEADLINE: <2017-12-10 Sun 20:00 ++1d>
Marking this DONE shifts the date by at least one day, and also by as many days as it takes to get the timestamp into the future. Since there is a time in the timestamp, the next deadline in the future will be on today's date if you complete the task before 20:00

**** TODO Check the batteries in the smoke detectors
DEADLINE: <2005-11-01 Tue .+1m>
Marking this DONE shifts the date to one month after today.

**** TODO Wash my hands
DEADLINE: <2019-04-05 08:00 Fri .+1h>
Marking this DONE shifts the date to exactly one hour from now.

*** Mark a task as Done

Simply go to the task line and press Shift+Left till DONE is toggled.

*** Check all Scheduled Tasks

*M-x org-agenda* to open it
Press *t* to get the list of all TODO entries
Use *N r* to filter 0 ALL, 1 TODO, 2 DONE

*** Schedule a Birthday

*M-x org-time-stamp*, or *C-c .*

For birthdays to repeat, you can set +1y
i.e.: André Jonas <1990-04-29 Fri +1y>

*** How to add a Tag?
*M-x counsel-org-tag*, and insert the tag name

You can also go to the line of the task you want to add the tag and hit *C-c C-q*

When you apply a tag, you can hit *RET* to close immediately the menu, org hit *M-RET* to keep adding more tags.

Note that in the orgmode.el config, you can define filtering by tags that exclude others.
i.e:

("W" "Work Tasks" tags-todo "+work") ;; will show all tasks that include the tag work
("W" "Work Tasks" tags-todo "+work-email) ;; will show all tasks that include the tag work and don't include the tag email

*** How to capture an idea?

Doesn't matter in which file you are, just do *M-x org-capture* and then press *tt* to capture a TODO to the tasks.org file.

You can also use it for journaling. Instead of *tt* press *jj* and it will be added to the journal.org file. It can capture many entries per day and keep it sorted.

You can also capture metrics. Check how it's configured on the *orgmode.el* file and you can improve it from there.

*** How to add an Habit?

Create a todo in the habits.org file and schedule it.
Set style with *M-x org-set-property*, or *C-c C-x p*
Set *style* and then *habit*

** ORG BABEL

OrgBabel allows to add code blocks inside your org files, and execute them, or export the blocks into other files.
*** How to run a src block?

Type *M-x org-babel-execute-src-block* or *C-c C-c* on top of the block you want to execute.

#+begin_src emacs-lisp :results value

  (message "Hello, World!")

#+end_src

#+RESULTS:
: Hello, World!

#+begin_src emacs-lisp

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (python . t)))

  (setq org-confirm-babel-evaluate nil)

#+end_src

#+RESULTS:

*** Structure Templates

#+begin_src emacs-lisp

  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))

#+end_src

With structure templates, you can type <el + TAB and it automatically creates an emacs-lisp source block.

You can check all the languages Babel supports [[https://orgmode.org/worg/org-contrib/babel/languages/index.html][here.]]

*** How to set an Emacs configuration file using OrgMode?

You can create a config file named, i.e.: emacs.org

You can create config code blocks in an emacs lisp template, which you can create with *<el + TAB*

You can *tangle* the src block. This means "take all the blocks in this file and write them out to the files where they belong in the file system.

Just run *M-x org-babel-tangle*

You can set the tangle definition by source block, or at the end of the file.
In a src block: *#+begin_src emacs-lisp :tangle ./init-new.el*

At the top of the file:
*#+PROPERTY: header-args:emacs-lisp :tangle ./init-new.el*

*** How to output all the blocks of your configuration files automatically?

#+begin_src emacs-lisp

  (org-babel-tangle)
  (org-babel-tangle-file "~/Projects/Code/emacs-from-scratch/Emacs.org")

#+end_src

Please check the *notes/emacs.org* file to see how an *Auto-tangle Confuration is done*
Check that we add an hook for org mode. Anytime a orgmode buffer is open, this hook is gonna be fired.

*** Different feature / Config nuances

I didn't write this example, but in the future it is somethigng really interesting to explore. 

Just search for the *:noweb yes* mark

** MAGIT
*** How to run git status?

Hit *C-x g* which is the equivalent to git status.

Note: You can Hide/Show Details hitting: *TAB*

If you change something outside of Emacs, you can press *g* to refresh the current status buffer or *G* to refresh all Magit buffers.

*** The popup of popups

There are many popups. For the most commonly used ones, you'll quickly learn the keys you have to press because they are mnemonic. Until then, or when you need to do something you rarely do, then the "popup of popups" comes to the rescue. Show it by typing *?*.

*** How to stage a change?

You can hover a change, and press *s* for stage.

*** How to commit?

To commit changes, press *c*, a menu will open, press *c* again for commit.

Write a commit message and press *C-c C-c*

*** How to push a commit?

Press *P* and then *p* 

NOTE: before pressing *p* make sure you're pushing to the right origin.

*** How to discard?

Press *k* to discard a hunk.

*** Acting on the selection

You can also stage multiple files or hunks at once. To do so, mark these sibling sections using the region.

Multiple select a region and press *s* to stage it.

** TERM MODES

Hit *C-c C-k* to get into *term char mode*
Notice a lock will appear when you activate it.
Hit *C-c C-j* to get back to *term line mode*
Lock will disappear

** STRAIGHT.EL

Here's the link to straight.el GitHub [[https://github.com/radian-software/straight.el][repo]].
Here's the link to David Wilson (System Crafters) GitHub [[Advanced Emacs Package Management with straight.el][repo]].

*** What is straight.el

straight.el describes itself as a "next-generation, purely functional package manager for Emacs."

It enables you to have more detailed control over how you manage the Emacs packages you use in your configuration.

It clones the actual source repositories of all the Emacs packages you use regardless of whether you find them on MELPA, ELPA, or others.

Using source repositories, allows us to be more explicit about which version to use.

straight.el is an alternative to package.el (Emacs built in package manager).

It integrates with *use-package* so that you can use *:straight t* instead of *:ensure t*

straight.el is very straightforward for any Emacs user.

*** How to see a list of all packages? 

An easy way to see a list of all packages that you might want to install is run *M-x straight-use-package"

If you go to the [[https://github.com/melpa/melpa][MELPA]] GitHub repository, you'll find a folder called recipes from where you can get the code to quickly install a package.

There's also *gnu-elpa-mirror*, which uses a special mirror of package from the GNU ELPA repo.
And there's emacsmirror-mirror, which uses a special mirror of packages from the Emacsmirror.

*** How to install a package?

You can also do *M-x straight-get-recipe*

*** How to upgrade a package?

You can upgrade packages individually or all at once.

*M-x straight-pull-package* will pull a single package to upgrade it to the latest.
*M-x straight-pull-package-and-deps* will pull package + all of its deps.
*M-x straight-pull-all* will upgrade all of your active packages.

Keep in mind that pulling/upgrading a package doesn't take effect immediately. When you restart Emacs, straight.el will reuild and load the latest versions of the packages you've installed.

If you want to activate the upgraded version of a package while Emacs is running, you can run *M-x straight-check-package* (or *M-x straight-check-all*)

There's no explicit way to "uninstall" a package. Simply remove  the *straight-use-package* line from your configuration.

If you want to make sure those unused repository folders are gone, you can hit *M-x straight-remove-unused-repos* to delete them. Note that those unused repos won't be loaded if they aren't referenced in your *init.el* file, though!

*** Integrating with use-package

Just add this line to your config.

#+begin_src emacs-lisp
(straight-use-package 'use-package)
#+end_src

If you want *use-package* to automatically install all of your packages without the need for adding *:straight t*, you can replicate the same behavior with the following setting:

#+begin_src emacs-lisp
(setq straight-use-package-by-default t)
#+end_src

*** Locking package versions

To have a more consistent and repeatable config across multiple machines, you can create a "lockfile".

*** Converting an existing configuration to straight.el

You can use both package.el and straight.el at the same time. But it's good to pick one of them to avoid weird issues.

How to migrate to straight.el:
- Delete your old elpa folder where package.el packages are installed
- add the bootstrap script ;; added in the emacs-config file
- add (straight-use-package 'use-package) to the config ;; added in the emacs-config file
- replace =:ensure= with =:straight=
- if you use *use-package-always-ensure*, replace it with *straight-use-package-by-default*
- close emacs and delete your ~/.emacs.d/elpa
- startup emacs

*** Why should I use straight.el?

- you prefer having a stable configuration
- you might develop Emacs packages or you maintain your own forks of Emacs packages
- you need to use Emacs packages that aren't in =MELPA= or =ELPA=.

** BUFFER LISTS WITH PERSPECTIVE.EL

[[https://www.youtube.com/watch?v=uyMdDzjQFMU&list=PLEoMzSkcN8oOP5WgckTbERn10CXxIFneB][Check David Wilson Video Here!]]
[[https://github.com/nex3/perspective-el][Check GitHub Docs Here!]]

** WATCHED VIDEOS
*** Emacs from Scratch #1 - Getting Started with a Basic Configuration
*** Emacs from Scratch #2 - Helpful UI Tweaks
*** Emacs from Scratch #3 - Key Bindings and Evil
*** Emacs from Scratch #4 - Projectile and Magit
*** Emacs from Scratch #5 - Org Mode Basics
**** PROBLEMS:
***** NOTE(SOLVED): I want org files to open expanded
*** Emacs from Scratch #6 - Organize Your Life with Org Mode
**** PROBLEMS:
***** NOTE: Not able to display birtdhays with +1y on the agenda
***** NOTE: Adding Habits is not working properly.
*** Emacs from Scratch #7 - Configure Everything with Org Babel
**** PROBLEMS:
***** NOTE: Add ability to evaluate javascript blocks.
*** Emacs from Scratch #8 - Build your Own IDE with lsp-mode
**** TODO TO WATCH
*** Emacs from Scratch #9 - Learn to Love the Terminal Modes

This is not a good video.
David Wilson fails configuring VTERM

*** Emacs from Scratch #10 - Effortless File Management with Dired
**** TODO TO WATCH
*** Keeping your Emacs Packages Up to Date
**** TODO TO WATCH
*** How to Cut Emacs Start Up Time in Half!
**** TODO TO WATCH
*** EFFICIENT MOVEMENT
**** TODO TO WATCH
*** EFFICIENT SELECTION
**** TODO TO WATCH
*** TEACH EMACS TO KEEP YOUR FOLDERS CLEAN

Very useful [[https://www.youtube.com/watch?v=XZjyJG-sFZI][video]]!

*** Declutter Your Buffer Lists in Emacs with Perspective.el
**** TODO TO WATCH
*** Advanced Emacs Package Management: straight.el 
Here's the [[https://www.youtube.com/watch?v=UmbVeqphGlc&t=8s][video]].

*** 5 Org Roam Hacks for Better Productivity in Emacs
**** TODO TO WATCH
Here's the [[https://www.youtube.com/watch?v=CUkuyW6hr18][link]] of this video.
Here's the link to the system crafters [[https://systemcrafters.net/build-a-second-brain-in-emacs/5-org-roam-hacks/][article]].

** REASONS TO LEARN EMACS IN 2022
 - If you want to go *really* far, install EXWM on Linux!
 - It creates a complete desktop environment using EXWM on Linux.
 - With org-mode you can do spreadsheets, or configure your entire system.

** EMACS LISP
*** What is Lisp?
- A language and environment based on the idea of interactivity
- The syntax enables new language constructs to be defined
- the ultimate hacker language!!!

** THINGS TO INVESTIGATE
*** TODO Learn how to use straight.el
*** TODO Learn how to open PDF files on Emacs
*** TODO Learn how to evaluate js/node.js code on org
*** TODO Configure LSP + JS/Typescript major mode
*** TODO Adding images to an org.file.
 
