1#+TITLE: EMACS LISP
#+AUTHOR: Eduardo Vedes
#+DATE: 2023-09-03
#+OPTIONS toc:2 num:nil
#+STARTUP: content

Where I take notes about Emacs Lisp Learning

* EMACS LISP
** 2. PRACTICING EVALUATION

Position the cursor after a list and type *C-x C-e*
Evaluation will be shown in the echo area.

To get help regarding a function description, type *C-h f*

Evaluate inline: *C-u C-x C-e*

*** 2.1 Buffer Names


#+begin_src emacs-lisp 

(buffer-name)"emacs-lisp.org"
(buffer-file-name)"/home/edo/.emacs.d/notes/emacs-lisp.org"

#+end_src


*** 2.2 Getting Buffers

#+begin_src emacs-lisp

(current-buffer)
(other-buffer)

#+end_src


*** 2.3 Switching Buffers


#+begin_src emacs-lisp

(switch-to-buffer (other-buffer)) ;; it shows the buffer
(set-buffer (other-buffer)) ;; doesn't show but sets the buffer for the program

#+end_src


*** 2.4 Buffer Size and the Location of Point

#+begin_src emacs-lisp

(buffer-size)
(point)
(point-min)

#+end_src


** 3. How to Write Function Definitions

All functions are defined in terms of other functions, except for a few primitive functions that are written in the C programming language.

*** 3.1 The *defun* Macro

#+begin_src 

(mark-whole-buffer)

#+end_src

A function definition can be organized in a template, with 5 parts:


#+begin_src 

(defun function-name (arguments...)
   "optional-documentation..."
   (interactive argument-passing-info) ; optional
   body...)   

As an example:

(defun multiply-by-seven (number)
  "Multiply NUMBER by seven."
  (* 7 number))

#+end_src


The documentation string is optional, but it is so useful, it should be included in almost every function you write.

That's what you see as *Documentation*  when you type *C-h f*, which triggers the define function.

*** 3.2 Install a Function definition

#+begin_src 

(multiply-by-seven 3)

This function won't run if you don't evaluate/install the function first. 

#+end_src

In summary, this is how you write code in Emacs Lisp: you write a function; install it; test it; and then make fixes or enhancements and install it again.


*** 3.3 Make a Function Interactive

You make a function interactive by placing a list that begins with the special form *interactive* immediately after the documentation.

An user can invoke function by typing *M-x* and then the name of the function, or by typing the keys to which it's bound.

#+begin_src 

(defun multiply-by-seven (number)   ; Interactive version.
  "Multiply NUMBER by seven."
  (interactive "p")
  (message "The result is %d" (* 7 number)))

#+end_src

You can install this code by placing the cursor after it and typing *C-x C-e*
The name of the function will appear in the echo area.
Then, you can use this code by typing *C-u* 3 (a number), and then typing *M-x multiply-by-seven*

The result will appear in the echo area.

The function *(interactive "p")* is a list of two elements. The "p" tells Emacs to pass the prefix argument to the function and use its value for the argument of the function.

*** 3.4 Different Options for *interactive*

Emacs has more than twenty chars predefined for use with *interactive*.
In almost every case, one of the options will enable you to pass the right information interactively to a function.


*** 3.5 Install Code Permanently

Add it to your literate config, or to your emacs init.el file.


