(if (version< "27.0" emacs-version)
  (set-fontset-font
      "fontset-default" 'unicode "Apple Color Emoji" nil 'prepend)
  (set-fontset-font
      t 'symbol (font-spec :family "Apple Color Emoji") nil 'prepend))

;; disable startup message
(setq inhibit-startup-message t)

;; set default path
(setq default-directory "/Users/edo/")

;; disable  menubar, toolbar and scrollbar
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)


;; # shortcut
(global-set-key (kbd "M-3") '(lambda () (interactive) (insert "#")))

;; y-or-n
(defalias 'yes-or-no-p 'y-or-n-p)

;; answering to y-or-n without typing
(mapcar (lambda (elt) (add-to-list 'yes-or-no-p-history elt))
        '("no" "yes"))


;; fast-scroll TO INVESTIGATE

;; exec-path-from-shell
(use-package exec-path-from-shell
  :ensure t
  :config
  (when (memq window-system '(mac ns))
    (exec-path-from-shell-initialize)))

(use-package all-the-icons
  :ensure t)



;; set command key as meta
(setq mac-command-modifier 'meta)

;; do not use 'init.el' for 'custom-*' code - use 'custom-file.el'
(setq custom-file "~/.emacs.d/custom-file.el")
(load-file custom-file)

;; include melpa in the list of packages archives
(require 'package)
(package-initialize)

;; add 'melpa' to package-archives
(add-to-list 'package-archives
	     '("melpa" . "http://melpa.milkbox.net/packages/") t)

(when (not (package-installed-p 'use-package))
  (package-refresh-contents)
  (package-install 'use-package))

(use-package doom-themes
  :ensure doom-themes
  :requires (all-the-icons)
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-one t)
  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  (doom-themes-treemacs-config))

;; show line numbers
(use-package linum
  :ensure linum
  :config
  (setq linum-format " %3d ")
  (global-linum-mode nil))

;; highlight current line
(use-package hl-line
  :ensure hl-line
  :custom-face (hl-line ((t (:extend t))))
  :hook (after-init . global-hl-line-mode))

;; don't use tabs to ident
(setq-default indent-tabs-mode nil)

;; move between windows
(use-package windmove
  :ensure t
  :config
  (windmove-default-keybindings)
  ;; Make windmove work in org-mode:
  (add-hook 'org-shiftup-final-hook 'windmove-up)
  (add-hook 'org-shiftleft-final-hook 'windmove-left)
  (add-hook 'org-shiftdown-final-hook 'windmove-down)
  (add-hook 'org-shiftright-final-hook 'windmove-right))

;; buffer move
(use-package buffer-move
  :ensure t
  :config
  (global-set-key (kbd "<C-M-up>")     'buf-move-up)
  (global-set-key (kbd "<C-M-down>")   'buf-move-down)
  (global-set-key (kbd "<C-M-left>")   'buf-move-left)
  (global-set-key (kbd "<C-M-right>")  'buf-move-right))

;; ensure whitespace cleanup on save
(use-package whitespace
  :ensure t
  :init
  (dolist (hook '(prog-mode-hook text-mode-hook))
    (add-hook hook #'whitespace-mode))
  (add-hook 'before-save-hook #'whitespace-cleanup)
  :config
  (setq whitespace-line-column 80)
  (setq whitespace-style '(face tabs empty trailing lines-tail)))

;; markdown mode
(use-package markdown-mode
  :ensure t
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown")
  :config
  (add-hook 'markdown-mode-hook #'linum-mode))

(use-package company-emoji
  :ensure company-emoji)

(use-package company
  :ensure t
  :bind (:map company-active-map
	      ("C-n" . company-select-next)
	      ("C-p" . company-select-previous))
  :config
  (setq company-idle-delay 0.0)
  (add-to-list 'company-backends 'company-emoji)
  (global-company-mode t))
